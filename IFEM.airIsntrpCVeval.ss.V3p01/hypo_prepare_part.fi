!--------------
!Corresponding changes to save space
allocate (partele(ne))
allocate (partnode(nn))
allocate (tmp_index(ne))


! Read in partition information for connectivity matrix
call readpartele(partele)
! Read in partition information for nodes
call readpartnode(partnode)

nn_local=0
ne_local=0
ne_intlocal=0

! Get subregion-->wholeregion element index for FEM interpolation
do count = 1,ne
        if (partele(count) == myid) then
                ne_intlocal=ne_intlocal+1
        endif
end do
        allocate(ien_intlocal(ne_intlocal))

ne_intlocal=0

do count = 1,ne
        if (partele(count) == myid) then
                ne_intlocal=ne_intlocal+1
                ien_intlocal(ne_intlocal)=count
        endif
end do
! Get subregion-->wholeregion node index
do count = 1,nn
	if (partnode(count) == myid) then
		nn_local=nn_local+1
	endif
end do

	allocate(node_local(nn_local))
!	allocate(p_local(ndf,nn_local))
!	allocate(w_local(ndf,nn_local))
!	allocate(dg_local(ndf,nn_local))
!	allocate(dg_tmp(ndf,nn))
nn_local=0

do count = 1,nn
        if (partnode(count) == myid) then
                nn_local=nn_local+1
                node_local(nn_local)=count
        endif
end do

! Based on node partition, get subregion-->wholeregion element index, used by fluid solver 
tmp_index(:)=0
do ie=1,ne
	do inen=1,nen

		if (partnode(ien(inen,ie)) == myid) then
			tmp_index(ie) = 1
		end if
	end do
end do

do ie=1,ne
	if (tmp_index(ie)==1) then
		ne_local=ne_local+1
	end if
end do

        allocate(ien_local(ne_local))
ne_local=0

do ie=1,ne
        if (tmp_index(ie)==1) then
                ne_local=ne_local+1
		ien_local(ne_local)=ie
        end if
end do

!if (myid == 0) then
!  open (unit=20, file = 'ien_local.in', status='unknown')
!do count=1,ne_local
!	write(20,*) ien_local(count)
!end do
!end if



node_global(:)=0

do count = 1,nn_local
	node_global(node_local(count))=count
end do

!------------
! Deallocate variables

deallocate(partele)
deallocate(partnode)
deallocate(tmp_index)		

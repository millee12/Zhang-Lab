  if (nsd_solid==2) then
	if (nen_solid == 3) then
        call quad2d3n(iquad_solid, nquad_solid, xq_solid, wq_solid, nsdpad_solid, nquadpad_solid)
	elseif (nen_solid == 4) then
        call quad2d4n(iquad_solid, nquad_solid, xq_solid, wq_solid, nsdpad_solid, nquadpad_solid)
	endif
  elseif (nsd_solid==3) then
	if (nen_solid == 4) then
        call quad3d4n(iquad_solid, nquad_solid, xq_solid, wq_solid, nsdpad_solid, nquadpad_solid)
	elseif (nen_solid == 8) then
        call quad3d8n(iquad_solid, nquad_solid, xq_solid, wq_solid, nsdpad_solid, nquadpad_solid)
	endif
  endif

  allocate(solid_fem_con_1(ne_solid_1,nen_solid),stat=error_id)
  allocate(coor_1(nn_solid_1,nsd_solid),stat=error_id)
!======================================================
  allocate(mtype1(ne_solid_1),stat=error_id) 
! Adding solid matrial type index
!======================================================
 !...read element connectivity for one structure
  call readien_solid(solid_fem_con_1,ne_solid_1,nen_solid,mtype1)
 !...read coordinates for one structure
  call readx_solid(coor_1,nn_solid_1,nsd_solid)

!=======================================================
  call read_solidbc(ien_sbc_1)
  call read_solidnodebc(node_sbc_1)
! read in solid interface elements and nodes





!---------------------------------------------------------
! read in the nodes at the fluid bourdary and the number of them
 !...read node connected with fluid boundary
if (node_sfcon .ne. 0) then
  call read_sfcon(sfcon_1,node_sfcon_1)
end if
!---------------------------------------------------------
 !...scale structure
  do i=1,nsd_solid
     coor_1(:,i)=coor_1(:,i)*solid_scale(i)
  enddo

 !...copy the one structure to multiple (n_solid) identical structures
  do i=1,n_solid
      do j=1,nsd_solid
	  solid_coor_init(j,nn_solid_1*(i-1)+1:nn_solid_1*i) = coor_1(1:nn_solid_1,j) + shift(j,i)
	enddo
    solid_fem_con(ne_solid_1*(i-1)+1:ne_solid_1*i,1:nen_solid) = solid_fem_con_1(1:ne_solid_1,1:nen_solid) + (i-1)*nn_solid_1
  enddo
!------------------------------------------------------------
do i=1,n_solid
   sfcon(node_sfcon_1*(i-1)+1:node_sfcon_1*i)=sfcon_1(1:node_sfcon_1)
   node_sbc(nn_sbc_1*(i-1)+1:nn_sbc_1*i)=node_sbc_1(1:nn_sbc_1)
   ien_sbc(ne_sbc_1*(i-1)+1:ne_sbc_1*i,:)=ien_sbc_1(1:ne_sbc_1,:)
   mtype(ne_solid_1*(i-1)+1:ne_solid_1*i) = mtype1(1:ne_solid_1)
enddo
!===========================================================================================
! For special case when we want to have 2 solid symeric with respect to the centre line  
if (n_solid == 2) then
  i=1
      do j=1,nsd_solid
          solid_coor_init(j,nn_solid_1*(i-1)+1:nn_solid_1*i) = coor_1(1:nn_solid_1,j) + shift(j,i)
        enddo
    solid_fem_con(ne_solid_1*(i-1)+1:ne_solid_1*i,1:nen_solid) = solid_fem_con_1(1:ne_solid_1,1:nen_solid) + (i-1)*nn_solid_1
  


  
  i=2
      
          solid_coor_init(2,nn_solid_1*(i-1)+1:nn_solid_1*i) = 2.794d0-coor_1(1:nn_solid_1,2) + shift(2,i)
          solid_coor_init(1,nn_solid_1*(i-1)+1:nn_solid_1*i) = coor_1(1:nn_solid_1,1) + shift(1,i) 
  if (nen_solid==4) then
  do  j=1,nen_solid
     solid_fem_con(ne_solid_1*(i-1)+1:ne_solid_1*i,j) = solid_fem_con_1(1:ne_solid_1,5-j) + (i-1)*nn_solid_1
  end do
  end if
  ! Triangle mesh need other formular
  if (nen_solid==3) then
  do  j=1,nen_solid
     solid_fem_con(ne_solid_1*(i-1)+1:ne_solid_1*i,j) = solid_fem_con_1(1:ne_solid_1,4-j) + (i-1)*nn_solid_1
  end do
  end if
! Copy the materical type index
do i=1,n_solid
   mtype(ne_solid_1*(i-1)+1:ne_solid_1*i) = mtype1(1:ne_solid_1)
enddo
 ! Copy the node index on the fluid boundary
   sfcon(1:node_sfcon_1)=sfcon_1(1:node_sfcon_1)
   sfcon(node_sfcon_1+1:node_sfcon)=sfcon_1(1:node_sfcon_1)+nn_solid_1

! Copy the node index on solid boundary
   node_sbc(1:nn_sbc_1)=node_sbc_1(1:nn_sbc_1)
   node_sbc(nn_sbc_1+1:nn_sbc)=node_sbc_1(1:nn_sbc_1)+nn_solid_1
! Copy element information on solid boundary
if (nen_solid == 3) then
	ien_sbc(1:ne_sbc_1,1:nen_solid+2)=ien_sbc_1(1:ne_sbc_1,1:nen_solid+2)
	ien_sbc(ne_sbc_1+1:ne_sbc,1)=ien_sbc_1(1:ne_sbc_1,1)+ne_solid_1
	ien_sbc(ne_sbc_1+1:ne_sbc,2)=ien_sbc_1(1:ne_sbc_1,4)
        ien_sbc(ne_sbc_1+1:ne_sbc,4)=ien_sbc_1(1:ne_sbc_1,2)
        ien_sbc(ne_sbc_1+1:ne_sbc,3)=ien_sbc_1(1:ne_sbc_1,3)
end if

if (nen_solid == 4) then
	write(*,*) 'error not ready yet'
end if

end if
!============================================================

  deallocate(solid_fem_con_1,stat=error_id)
  deallocate(coor_1,stat=error_id)
  deallocate(shift,stat=error_id)  

 !...initialize arrays
  solid_coor_curr(1:nsd_solid,1:nn_solid) = solid_coor_init(1:nsd_solid,1:nn_solid)
  solid_force_FSI(1:nsd_solid,1:nn_solid) = 0.0d0

  solid_prevel(1:nsd_solid,1:nn_solid)    = 0.0d0
  id_solidbc(:,:) = 1
  solid_coor_pre1(1:nsd_solid,1:nn_solid) = solid_coor_init(1:nsd_solid,1:nn_solid)
  solid_coor_pre2(1:nsd_solid,1:nn_solid) = solid_coor_init(1:nsd_solid,1:nn_solid)

  if (ninit .eq. 1) then
     call r_sreadinit(solid_coor_init,solid_coor_curr)
  endif


